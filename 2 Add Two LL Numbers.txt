You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode res = null;
        ListNode prev = null;
        ListNode temp = null;
        int carry = 0 , sum;
        
        //Till both the LL is not to NULL
        while (l1 != null || l2 != null ){
            
            //check the node has value or not if not assign  as zero
            sum = carry + (l1 != null ? l1.val : 0)
                + (l2 != null ? l2.val : 0);
            
            //getting the remainder
            carry = (sum >= 10) ? 1: 0;
            
            //value which we are going to put in new node
            sum = sum % 10;
            
            //create new node assign the value
            temp = new ListNode(sum);
            
            //getting the pointer address
            if (res == null){
                res = temp;
            } else {
                //connect new node with rest of the node
                prev.next = temp;
            }
            
            //move current node as previous
            prev = temp;
            
            
            //move forward if not null
            if (l1 != null){
                l1 = l1.next;
            }
            
            //move forward if not null
            if (l2 != null){
                l2 = l2.next;
            }
            
        }
        
        //if at the end we got remainder left
        // create a newnode and linked it.
        if (carry > 0){
            temp.next = new ListNode(carry);
        }
        
        return res;
    }
}